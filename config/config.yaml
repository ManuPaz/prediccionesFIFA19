preprocessing:
  #  preprocesado que se puede generalizar a otros dataframes

  # columnas para eliminar
  columns_drop: [ "Unnamed:0" ]
  #conversion de Unidades
  #para altura dos factores: pies a metros y pulgadas a metros, para ancho un factor: libras a kg
  unidades_conversion: { "Height": { "separador": "'", "factor_conv1": 0.3048, "factor_conv2": 0.0254 },
                         "Weight": { "unidad": "lbs", "factor_conv": 0.4536 }, }


#variables que se van a utilizar para predecir cada feature
variables_predictoras:
  Wage: [ "InternationalReputation", "Reactions",
          "Composure", "BallControl", "GKPositioning",
          "ShortPassing", "Interceptions", "Finishing",
          "GKKicking", "HeadingAccuracy", "SkillMoves",
          "LongPassing", "GKHandling", "Vision",
          "GKReflexes", "GKDiving", "Dribbling",
  ]

  PositionGrouped: [ "BallControl", "Penalties", "GKPositioning",
                     "SlidingTackle", "StandingTackle", "Marking",
                     "ShortPassing", "Jumping", "Interceptions",
                     "Finishing" ,"GKKicking" ,"HeadingAccuracy",
                     "Aggression" ,"LongPassing", "GKHandling",
                     "Volleys" ,"Vision" ,"LongShots" ,"GKReflexes",
                     "GKDiving" ,"Positioning" ]
  Position: [ "InternationalReputation", "Reactions", "Overall",
           "BallControl", "Penalties", "GKPositioning",
           "SlidingTackle", "StandingTackle",
           "ShortPassing", "Jumping", "Interceptions",
           "Finishing", "GKKicking", "HeadingAccuracy",
           "Aggression", "LongPassing", "GKHandling",
           "Volleys", "Vision", "LongShots",
           "GKReflexes", "GKDiving", "Positioning",
           "SkillMoves" ,"Dribbling" ,"FKAccuracy",
           "Marking" ,"Balance" ,"Curve" ,"Acceleration",
           "Crossing", "Stamina", "Agility" ,"ShotPower",
           "SprintSpeed" ,"Strength","PreferredFoot"
        ]

  todas: [ "InternationalReputation", "Reactions", "Overall",
           "BallControl", "Penalties", "GKPositioning",
           "SlidingTackle", "StandingTackle",
           "ShortPassing", "Jumping", "Interceptions",
           "Finishing", "GKKicking", "HeadingAccuracy",
           "Aggression", "LongPassing", "GKHandling",
           "Volleys", "Vision", "LongShots",
           "GKReflexes", "GKDiving", "Positioning",
           "SkillMoves" ,"Dribbling" ,"FKAccuracy",
           "Marking" ,"Balance" ,"Curve" ,"Acceleration",
           "Crossing", "Stamina", "Agility" ,"ShotPower",
           "SprintSpeed" ,"Strength"
  ]
  Value: [ "InternationalReputation", "Reactions", "Overall",
           "BallControl", "Penalties", "GKPositioning",
           "SlidingTackle", "StandingTackle",
           "ShortPassing", "Jumping", "Interceptions",
           "Finishing", "GKKicking", "HeadingAccuracy",
           "Aggression", "LongPassing", "GKHandling",
           "Volleys", "Vision", "LongShots",
           "GKReflexes", "GKDiving", "Positioning",
           "SkillMoves" ,"Dribbling" ,"FKAccuracy",
           "Marking" ,"Balance" ,"Curve" ,"Acceleration",
           "Crossing", "Stamina", "Agility" ,"ShotPower",
           "SprintSpeed" ,"Strength"
  ]


forecasting:
  todos_los_modelos: False #mostrar las predicciones con todos los modelos o solo el mejor

entrenamiento:

  plot: True #variable para hacer plots o no durante el entrenamiento
  normalize_X: True
  random_seed: 20
  reducir_dimensionalidad: False #usar pca para reducir la dimensionalidad
  optimizar: False
  feature_clasificacion: "Position"  # variable que se quiere predecir con el modelo de clasificacion

  feature_regresion: "Wage"  #variable que se quiere predecir con el modelo de regresion

  train_test_split: 0.7
  search: "grid"  #tipo de busqueda si se hace optmizacion, grid o random
  cv: 20 # numero de grupos de cross validation
  random_search:
    n_iter: 10 #numero de combinaciones del espacio parametrico utilizadas si se hace random search

  classification: #parametros exclusivos de clasificacion
    multi_class_score: "macro" #forma de computar las metricas con multi clase. Micro agrega todas las clases
                                #y macro calcula clase a clase y hace la media
    modelos : [ "lda","random_forest"
                ] #modelos a utilizar en train_all para clasificacion

    todos: [ "random_forest",
               "gradient_boosting", "ada_boosting",
               "linear_SVC", "logistic",
               "k_neighbors", "lda" ] #todos los modelos considerador
    param_tunning: #parametros fijos
      decision_tree:
        # minimo, maximo y step
        max_depth: [ 3,20,5 ] # default None
        min_samples_split: [ 2, 30, 10 ] # default 2
      random_forest:
        #max_depth: [ 3,20,5 ] # minimo, maximo y step
        #min_samples_split [ 2, 50, 15]
        n_estimators: [1,10,100 ]
      linear_SVC:
        C: [ 0.1, 5, 0.5 ]
      gradient_boosting:
        max_depth: [ 3,20,5 ] #default 3
        n_estimators: [ 10,30,5 ] #default 100
        learning_rate: [ 0.05, 0.3, 0.05 ] #default 0.1
      ada_boosting: #por defecto usa como estimador base decission tree con max_depth=1
        n_estimators: [ 10,30,5 ] # default 50
        learning_rate: [ 0.05, 1, 0.3 ] #default 1
      k_neighbors:
        n_neighbors: [ 2,20,5 ]
        weights: [ "uniform"]
        metric: [ "minkowski" ]
    params: #parametros a optimizar
        linear_SVC:
          multi_class: "ovr" #one vs rest, la otra opcion es crammer_singer
        logistic:
          multi_class: "ovr"
        random_forest:
            min_samples_split: 20
            max_depth: 20
            n_estimators: 100


  regression: #parametros exclusivos de regresion
    transformacion_logaritmica:  True # para transformar el feature con log (util para lasso, ridge y linear
                                      # porque tanto Wage como Value son exponenciales)
    normalize_y: True #para transformar el feature normalizando (util para los metodos de gradiente
                      # porque se normaliza X e y para tener el error en la misma escala que las variables)



    modelos: [ "lasso","ridge","linear","SVR"] #modelos a probar en train_all

    todos: [ "ridge", "lasso", "linear",
               "k_neighbors", "random_forest",
               "gradient_boosting","linear_SVR",
          "logistic","elastic_net","SVR"] #todos los modelos considerados

  #configuracion para la optimizacion de parametros
    param_tunning: #parametros a optimizar

      k_neighbors:
        n_neighbors: [ 2,20,4 ]
        weights: [ "uniform" ]
      random_forest:

        n_estimators: [ 20,160,40 ]
        max_depth: [2,20,4]
        min_samples_split: [2,30,5]

      gradient_boosting:
        max_depth: [10,40,4 ] #default 3
        n_estimators: [ 20,51,10 ] #default 100
      linear_SVR:
        C: [ 0.5, 5, 0.5 ]
      SVR:
        C: [ 0.5, 5, 0.5 ]

    params: #parametros fijos
      k_neighbors:
          metric: "minkowski"
      random_forest:
        n_estimators: 50
        max_depth: 15
        min_samples_split: 2

      gradient_boosting:
        learning_rate: 0.1 #default 0.1
      SVR:
        C: 1









